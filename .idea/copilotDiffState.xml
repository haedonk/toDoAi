<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/API_REFERENCE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/API_REFERENCE.md" />
              <option name="updatedContent" value="# Todo AI App - API Reference&#10;&#10;Base URL: `http://localhost:8080/api`&#10;&#10;## Authentication&#10;&#10;### Register&#10;```http&#10;POST /api/auth/register&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;username&quot;: &quot;john_doe&quot;,&#10;  &quot;email&quot;: &quot;john@example.com&quot;, &#10;  &quot;password&quot;: &quot;securepassword123&quot;&#10;}&#10;```&#10;&#10;### Login&#10;```http&#10;POST /api/auth/login&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;username&quot;: &quot;john_doe&quot;,&#10;  &quot;password&quot;: &quot;securepassword123&quot;&#10;}&#10;```&#10;**Response:** JWT token for Authorization header&#10;&#10;---&#10;&#10;## Todos&#10;&#10;**All todo endpoints require:** `Authorization: Bearer &lt;jwt-token&gt;`&#10;&#10;### Get All Todos&#10;```http&#10;GET /api/todos&#10;```&#10;&#10;### Create Todo&#10;```http&#10;POST /api/todos&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;title&quot;: &quot;Task title&quot;,&#10;  &quot;description&quot;: &quot;Task description&quot;, &#10;  &quot;priority&quot;: &quot;HIGH&quot;,&#10;  &quot;dueDate&quot;: &quot;2025-08-10T10:00:00&quot;&#10;}&#10;```&#10;**Priorities:** `LOW`, `MEDIUM`, `HIGH`, `URGENT`&#10;&#10;### Update Todo&#10;```http&#10;PUT /api/todos/{id}&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;title&quot;: &quot;Updated title&quot;,&#10;  &quot;description&quot;: &quot;Updated description&quot;,&#10;  &quot;priority&quot;: &quot;URGENT&quot;, &#10;  &quot;dueDate&quot;: &quot;2025-08-15T15:00:00&quot;&#10;}&#10;```&#10;&#10;### Mark Complete&#10;```http&#10;PATCH /api/todos/{id}/complete&#10;```&#10;&#10;### Toggle Completion&#10;```http&#10;PATCH /api/todos/{id}/toggle&#10;```&#10;**Note:** Switches between completed/uncompleted&#10;&#10;### Delete Todo&#10;```http&#10;DELETE /api/todos/{id}&#10;```&#10;&#10;---&#10;&#10;## AI Features&#10;&#10;**All AI endpoints require:** `Authorization: Bearer &lt;jwt-token&gt;`&#10;&#10;### Prioritize Todos&#10;```http&#10;POST /api/ai/prioritize&#10;```&#10;**Returns:** Todos reordered by AI importance&#10;&#10;### Generate Suggestions&#10;```http&#10;POST /api/ai/suggest&#10;```&#10;**Returns:** 3 AI-generated task suggestions&#10;&#10;### Get Suggestions&#10;```http&#10;GET /api/ai/suggestions&#10;```&#10;**Returns:** All saved AI suggestions for user&#10;&#10;---&#10;&#10;## Health Check&#10;&#10;```http&#10;GET /api/health&#10;GET /actuator/health&#10;```&#10;**No authentication required**&#10;&#10;---&#10;&#10;## Response Format&#10;&#10;### Success Response&#10;```json&#10;{&#10;  &quot;id&quot;: 1,&#10;  &quot;title&quot;: &quot;Task title&quot;,&#10;  &quot;description&quot;: &quot;Task description&quot;,&#10;  &quot;priority&quot;: &quot;HIGH&quot;,&#10;  &quot;isCompleted&quot;: false,&#10;  &quot;dueDate&quot;: &quot;2025-08-10T10:00:00&quot;,&#10;  &quot;createdAt&quot;: &quot;2025-08-04T09:00:00&quot;,&#10;  &quot;updatedAt&quot;: &quot;2025-08-04T09:00:00&quot;&#10;}&#10;```&#10;&#10;### Error Response&#10;```json&#10;{&#10;  &quot;message&quot;: &quot;Error description&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;## Quick Test Commands&#10;&#10;```bash&#10;# Register&#10;curl -X POST http://localhost:8080/api/auth/register \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;:&quot;test&quot;,&quot;email&quot;:&quot;test@test.com&quot;,&quot;password&quot;:&quot;password123&quot;}'&#10;&#10;# Login&#10;curl -X POST http://localhost:8080/api/auth/login \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;:&quot;test&quot;,&quot;password&quot;:&quot;password123&quot;}'&#10;&#10;# Create Todo&#10;curl -X POST http://localhost:8080/api/todos \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -H &quot;Authorization: Bearer YOUR_TOKEN&quot; \&#10;  -d '{&quot;title&quot;:&quot;Test Task&quot;,&quot;priority&quot;:&quot;HIGH&quot;}'&#10;&#10;# Toggle Todo&#10;curl -X PATCH http://localhost:8080/api/todos/1/toggle \&#10;  -H &quot;Authorization: Bearer YOUR_TOKEN&quot;&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fix_priority_constraint.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fix_priority_constraint.sql" />
              <option name="updatedContent" value="-- SQL script to fix the todos_priority_check constraint&#10;-- Run this in your PostgreSQL database&#10;&#10;-- Drop the existing constraint that's causing issues&#10;ALTER TABLE todos DROP CONSTRAINT IF EXISTS todos_priority_check;&#10;&#10;-- Create the correct constraint that matches your Java enum values&#10;ALTER TABLE todos ADD CONSTRAINT todos_priority_check &#10;CHECK (priority IN ('LOW', 'MEDIUM', 'HIGH', 'URGENT'));&#10;&#10;-- Verify the constraint was created correctly&#10;SELECT conname, consrc &#10;FROM pg_constraint &#10;WHERE conname = 'todos_priority_check';" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle" />
              <option name="originalContent" value="rootProject.name = 'toDoAi'" />
              <option name="updatedContent" value="rootProject.name = 'todo-ai-app'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/TodoAiApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/TodoAiApplication.java" />
              <option name="updatedContent" value="package com.todoai;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class TodoAiApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(TodoAiApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/config/WebSecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/config/WebSecurityConfig.java" />
              <option name="originalContent" value="package com.todoai.config;&#10;&#10;import com.todoai.security.AuthTokenFilter;&#10;import com.todoai.service.UserDetailsServiceImpl;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;&#10;&#10;import java.util.Arrays;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;@EnableMethodSecurity(prePostEnabled = true)&#10;public class WebSecurityConfig {&#10;&#10;    @Autowired&#10;    UserDetailsServiceImpl userDetailsService;&#10;&#10;    @Bean&#10;    public AuthTokenFilter authenticationJwtTokenFilter() {&#10;        return new AuthTokenFilter();&#10;    }&#10;&#10;    @Bean&#10;    public DaoAuthenticationProvider authenticationProvider() {&#10;        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();&#10;        authProvider.setUserDetailsService(userDetailsService);&#10;        authProvider.setPasswordEncoder(passwordEncoder());&#10;        return authProvider;&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {&#10;        return authConfig.getAuthenticationManager();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http.cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;            .authorizeHttpRequests(auth -&gt;&#10;                auth.requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                    .requestMatchers(&quot;/actuator/health&quot;, &quot;/api/health&quot;).permitAll()&#10;                    .anyRequest().authenticated()&#10;            );&#10;&#10;        http.authenticationProvider(authenticationProvider());&#10;        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public CorsConfigurationSource corsConfigurationSource() {&#10;        CorsConfiguration configuration = new CorsConfiguration();&#10;        &#10;        // Specific origins for better security&#10;        configuration.setAllowedOriginPatterns(Arrays.asList(&#10;            &quot;http://localhost:*&quot;,           // Local development&#10;            &quot;https://haedonk.github.io&quot;,    // Your GitHub Pages frontend&#10;            &quot;https://*.vercel.app&quot;,         // Vercel deployments&#10;            &quot;https://*.netlify.app&quot;         // Netlify deployments (if needed)&#10;        ));&#10;        &#10;        configuration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;PATCH&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;));&#10;        configuration.setAllowedHeaders(Arrays.asList(&quot;*&quot;));&#10;        configuration.setAllowCredentials(true);&#10;        &#10;        // Allow preflight requests to be cached for 1 hour&#10;        configuration.setMaxAge(3600L);&#10;&#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todoai.config;&#10;&#10;import com.todoai.security.AuthTokenFilter;&#10;import com.todoai.service.UserDetailsServiceImpl;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;@EnableMethodSecurity(prePostEnabled = true)&#10;public class WebSecurityConfig {&#10;&#10;    @Autowired&#10;    UserDetailsServiceImpl userDetailsService;&#10;&#10;    @Bean&#10;    public AuthTokenFilter authenticationJwtTokenFilter() {&#10;        return new AuthTokenFilter();&#10;    }&#10;&#10;    @Bean&#10;    public DaoAuthenticationProvider authenticationProvider() {&#10;        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();&#10;        authProvider.setUserDetailsService(userDetailsService);&#10;        authProvider.setPasswordEncoder(passwordEncoder());&#10;        return authProvider;&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {&#10;        return authConfig.getAuthenticationManager();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http.cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;            .authorizeHttpRequests(auth -&gt;&#10;                auth.requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                    .requestMatchers(&quot;/actuator/health&quot;, &quot;/api/health&quot;).permitAll()&#10;                    .anyRequest().authenticated()&#10;            );&#10;&#10;        http.authenticationProvider(authenticationProvider());&#10;        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public CorsConfigurationSource corsConfigurationSource() {&#10;        CorsConfiguration configuration = new CorsConfiguration();&#10;        &#10;        // Get allowed origins from environment variables&#10;        String allowedOrigins = System.getenv(&quot;CORS_ALLOWED_ORIGINS&quot;);&#10;        if (allowedOrigins != null &amp;&amp; !allowedOrigins.trim().isEmpty()) {&#10;            // Split by comma and trim whitespace&#10;            List&lt;String&gt; origins = Arrays.stream(allowedOrigins.split(&quot;,&quot;))&#10;                    .map(String::trim)&#10;                    .collect(Collectors.toList());&#10;            configuration.setAllowedOriginPatterns(origins);&#10;        } else {&#10;            // Default fallback for local development&#10;            configuration.setAllowedOriginPatterns(Arrays.asList(&quot;http://localhost:*&quot;));&#10;        }&#10;        &#10;        configuration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;PATCH&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;));&#10;        configuration.setAllowedHeaders(Arrays.asList(&quot;*&quot;));&#10;        configuration.setAllowCredentials(true);&#10;        &#10;        // Allow preflight requests to be cached for 1 hour&#10;        configuration.setMaxAge(3600L);&#10;&#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/controller/AiController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/controller/AiController.java" />
              <option name="updatedContent" value="package com.todoai.controller;&#10;&#10;import com.todoai.dto.ai.AiSuggestionResponse;&#10;import com.todoai.dto.todo.TodoResponse;&#10;import com.todoai.service.OpenAiService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@CrossOrigin(origins = &quot;*&quot;, maxAge = 3600)&#10;@RestController&#10;@RequestMapping(&quot;/api/ai&quot;)&#10;public class AiController {&#10;    @Autowired&#10;    private OpenAiService openAiService;&#10;&#10;    @PostMapping(&quot;/prioritize&quot;)&#10;    public ResponseEntity&lt;List&lt;TodoResponse&gt;&gt; prioritizeTodos(Authentication authentication) {&#10;        List&lt;TodoResponse&gt; prioritizedTodos = openAiService.prioritizeTodos(authentication);&#10;        return ResponseEntity.ok(prioritizedTodos);&#10;    }&#10;&#10;    @PostMapping(&quot;/suggest&quot;)&#10;    public ResponseEntity&lt;List&lt;AiSuggestionResponse&gt;&gt; generateSuggestions(Authentication authentication) {&#10;        List&lt;AiSuggestionResponse&gt; suggestions = openAiService.generateSuggestions(authentication);&#10;        return ResponseEntity.ok(suggestions);&#10;    }&#10;&#10;    @GetMapping(&quot;/suggestions&quot;)&#10;    public ResponseEntity&lt;List&lt;AiSuggestionResponse&gt;&gt; getUserSuggestions(Authentication authentication) {&#10;        List&lt;AiSuggestionResponse&gt; suggestions = openAiService.getUserSuggestions(authentication);&#10;        return ResponseEntity.ok(suggestions);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/controller/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/controller/AuthController.java" />
              <option name="updatedContent" value="package com.todoai.controller;&#10;&#10;import com.todoai.dto.auth.JwtResponse;&#10;import com.todoai.dto.auth.LoginRequest;&#10;import com.todoai.dto.auth.RegisterRequest;&#10;import com.todoai.entity.User;&#10;import com.todoai.service.AuthService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@CrossOrigin(origins = &quot;*&quot;, maxAge = 3600)&#10;@RestController&#10;@RequestMapping(&quot;/api/auth&quot;)&#10;public class AuthController {&#10;    @Autowired&#10;    AuthService authService;&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;?&gt; authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {&#10;        try {&#10;            JwtResponse jwtResponse = authService.authenticateUser(loginRequest);&#10;            return ResponseEntity.ok(jwtResponse);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new MessageResponse(&quot;Error: Invalid username or password!&quot;));&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public ResponseEntity&lt;?&gt; registerUser(@Valid @RequestBody RegisterRequest registerRequest) {&#10;        try {&#10;            User user = authService.registerUser(registerRequest);&#10;            return ResponseEntity.ok(new MessageResponse(&quot;User registered successfully!&quot;));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new MessageResponse(e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Inner class for response messages&#10;    public static class MessageResponse {&#10;        private String message;&#10;&#10;        public MessageResponse(String message) {&#10;            this.message = message;&#10;        }&#10;&#10;        public String getMessage() {&#10;            return message;&#10;        }&#10;&#10;        public void setMessage(String message) {&#10;            this.message = message;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/controller/HealthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/controller/HealthController.java" />
              <option name="originalContent" value="package com.todoai.controller;&#10;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@RestController&#10;public class HealthController {&#10;&#10;    @GetMapping(&quot;/actuator/health&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; health() {&#10;        Map&lt;String, String&gt; status = new HashMap&lt;&gt;();&#10;        status.put(&quot;status&quot;, &quot;UP&quot;);&#10;        status.put(&quot;service&quot;, &quot;todo-ai-app&quot;);&#10;        return ResponseEntity.ok(status);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todoai.controller;&#10;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@RestController&#10;public class HealthController {&#10;&#10;    @GetMapping({&quot;/actuator/health&quot;, &quot;/api/health&quot;})&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; health() {&#10;        Map&lt;String, String&gt; status = new HashMap&lt;&gt;();&#10;        status.put(&quot;status&quot;, &quot;UP&quot;);&#10;        status.put(&quot;service&quot;, &quot;todo-ai-app&quot;);&#10;        return ResponseEntity.ok(status);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/controller/TodoController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/controller/TodoController.java" />
              <option name="originalContent" value="package com.todoai.controller;&#10;&#10;import com.todoai.dto.todo.TodoRequest;&#10;import com.todoai.dto.todo.TodoResponse;&#10;import com.todoai.service.TodoService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@CrossOrigin(origins = &quot;*&quot;, maxAge = 3600)&#10;@RestController&#10;@RequestMapping(&quot;/api/todos&quot;)&#10;public class TodoController {&#10;    @Autowired&#10;    private TodoService todoService;&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;TodoResponse&gt;&gt; getUserTodos(Authentication authentication) {&#10;        List&lt;TodoResponse&gt; todos = todoService.getUserTodos(authentication);&#10;        return ResponseEntity.ok(todos);&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;TodoResponse&gt; createTodo(@Valid @RequestBody TodoRequest todoRequest,&#10;                                                   Authentication authentication) {&#10;        TodoResponse todo = todoService.createTodo(todoRequest, authentication);&#10;        return ResponseEntity.ok(todo);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; updateTodo(@PathVariable Long id,&#10;                                       @Valid @RequestBody TodoRequest todoRequest,&#10;                                       Authentication authentication) {&#10;        try {&#10;            TodoResponse todo = todoService.updateTodo(id, todoRequest, authentication);&#10;            return ResponseEntity.ok(todo);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new AuthController.MessageResponse(e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @PatchMapping(&quot;/{id}/complete&quot;)&#10;    public ResponseEntity&lt;?&gt; completeTodo(@PathVariable Long id, Authentication authentication) {&#10;        try {&#10;            TodoResponse todo = todoService.completeTodo(id, authentication);&#10;            return ResponseEntity.ok(todo);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new AuthController.MessageResponse(e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; deleteTodo(@PathVariable Long id, Authentication authentication) {&#10;        try {&#10;            todoService.deleteTodo(id, authentication);&#10;            return ResponseEntity.ok(new AuthController.MessageResponse(&quot;Todo deleted successfully!&quot;));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new AuthController.MessageResponse(e.getMessage()));&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todoai.controller;&#10;&#10;import com.todoai.dto.todo.TodoRequest;&#10;import com.todoai.dto.todo.TodoResponse;&#10;import com.todoai.service.TodoService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@CrossOrigin(origins = &quot;*&quot;, maxAge = 3600)&#10;@RestController&#10;@RequestMapping(&quot;/api/todos&quot;)&#10;public class TodoController {&#10;    @Autowired&#10;    private TodoService todoService;&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;TodoResponse&gt;&gt; getUserTodos(Authentication authentication) {&#10;        List&lt;TodoResponse&gt; todos = todoService.getUserTodos(authentication);&#10;        return ResponseEntity.ok(todos);&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;TodoResponse&gt; createTodo(@Valid @RequestBody TodoRequest todoRequest,&#10;                                                   Authentication authentication) {&#10;        TodoResponse todo = todoService.createTodo(todoRequest, authentication);&#10;        return ResponseEntity.ok(todo);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; updateTodo(@PathVariable Long id,&#10;                                       @Valid @RequestBody TodoRequest todoRequest,&#10;                                       Authentication authentication) {&#10;        try {&#10;            TodoResponse todo = todoService.updateTodo(id, todoRequest, authentication);&#10;            return ResponseEntity.ok(todo);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new AuthController.MessageResponse(e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @PatchMapping(&quot;/{id}/complete&quot;)&#10;    public ResponseEntity&lt;?&gt; completeTodo(@PathVariable Long id, Authentication authentication) {&#10;        try {&#10;            TodoResponse todo = todoService.completeTodo(id, authentication);&#10;            return ResponseEntity.ok(todo);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new AuthController.MessageResponse(e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @PatchMapping(&quot;/{id}/toggle&quot;)&#10;    public ResponseEntity&lt;?&gt; toggleTodoCompletion(@PathVariable Long id, Authentication authentication) {&#10;        try {&#10;            TodoResponse todo = todoService.toggleTodoCompletion(id, authentication);&#10;            return ResponseEntity.ok(todo);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new AuthController.MessageResponse(e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; deleteTodo(@PathVariable Long id, Authentication authentication) {&#10;        try {&#10;            todoService.deleteTodo(id, authentication);&#10;            return ResponseEntity.ok(new AuthController.MessageResponse(&quot;Todo deleted successfully!&quot;));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(new AuthController.MessageResponse(e.getMessage()));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/dto/ai/AiSuggestionResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/dto/ai/AiSuggestionResponse.java" />
              <option name="updatedContent" value="package com.todoai.dto.ai;&#10;&#10;import com.todoai.entity.AiSuggestion;&#10;import com.todoai.entity.Todo;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public class AiSuggestionResponse {&#10;    private Long id;&#10;    private String suggestedTask;&#10;    private Todo.Priority priority;&#10;    private LocalDateTime createdAt;&#10;&#10;    public AiSuggestionResponse() {}&#10;&#10;    public AiSuggestionResponse(AiSuggestion aiSuggestion) {&#10;        this.id = aiSuggestion.getId();&#10;        this.suggestedTask = aiSuggestion.getSuggestedTask();&#10;        this.priority = aiSuggestion.getPriority();&#10;        this.createdAt = aiSuggestion.getCreatedAt();&#10;    }&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getSuggestedTask() {&#10;        return suggestedTask;&#10;    }&#10;&#10;    public void setSuggestedTask(String suggestedTask) {&#10;        this.suggestedTask = suggestedTask;&#10;    }&#10;&#10;    public Todo.Priority getPriority() {&#10;        return priority;&#10;    }&#10;&#10;    public void setPriority(Todo.Priority priority) {&#10;        this.priority = priority;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/dto/auth/JwtResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/dto/auth/JwtResponse.java" />
              <option name="updatedContent" value="package com.todoai.dto.auth;&#10;&#10;public class JwtResponse {&#10;    private String token;&#10;    private String type = &quot;Bearer&quot;;&#10;    private Long id;&#10;    private String username;&#10;    private String email;&#10;&#10;    public JwtResponse(String accessToken, Long id, String username, String email) {&#10;        this.token = accessToken;&#10;        this.id = id;&#10;        this.username = username;&#10;        this.email = email;&#10;    }&#10;&#10;    // Getters and setters&#10;    public String getToken() {&#10;        return token;&#10;    }&#10;&#10;    public void setToken(String token) {&#10;        this.token = token;&#10;    }&#10;&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    public void setType(String type) {&#10;        this.type = type;&#10;    }&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/dto/auth/LoginRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/dto/auth/LoginRequest.java" />
              <option name="updatedContent" value="package com.todoai.dto.auth;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;public class LoginRequest {&#10;    @NotBlank(message = &quot;Username is required&quot;)&#10;    private String username;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    private String password;&#10;&#10;    public LoginRequest() {}&#10;&#10;    public LoginRequest(String username, String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;&#10;    // Getters and setters&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/dto/todo/TodoRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/dto/todo/TodoRequest.java" />
              <option name="updatedContent" value="package com.todoai.dto.todo;&#10;&#10;import com.todoai.entity.Todo;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public class TodoRequest {&#10;    @NotBlank(message = &quot;Title is required&quot;)&#10;    @Size(max = 255, message = &quot;Title cannot exceed 255 characters&quot;)&#10;    private String title;&#10;&#10;    @Size(max = 1000, message = &quot;Description cannot exceed 1000 characters&quot;)&#10;    private String description;&#10;&#10;    private Todo.Priority priority = Todo.Priority.MEDIUM;&#10;&#10;    private LocalDateTime dueDate;&#10;&#10;    public TodoRequest() {}&#10;&#10;    public TodoRequest(String title, String description, Todo.Priority priority, LocalDateTime dueDate) {&#10;        this.title = title;&#10;        this.description = description;&#10;        this.priority = priority;&#10;        this.dueDate = dueDate;&#10;    }&#10;&#10;    // Getters and setters&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public Todo.Priority getPriority() {&#10;        return priority;&#10;    }&#10;&#10;    public void setPriority(Todo.Priority priority) {&#10;        this.priority = priority;&#10;    }&#10;&#10;    public LocalDateTime getDueDate() {&#10;        return dueDate;&#10;    }&#10;&#10;    public void setDueDate(LocalDateTime dueDate) {&#10;        this.dueDate = dueDate;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/dto/todo/TodoResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/dto/todo/TodoResponse.java" />
              <option name="updatedContent" value="package com.todoai.dto.todo;&#10;&#10;import com.todoai.entity.Todo;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public class TodoResponse {&#10;    private Long id;&#10;    private String title;&#10;    private String description;&#10;    private Todo.Priority priority;&#10;    private boolean isCompleted;&#10;    private LocalDateTime dueDate;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;&#10;    public TodoResponse() {}&#10;&#10;    public TodoResponse(Todo todo) {&#10;        this.id = todo.getId();&#10;        this.title = todo.getTitle();&#10;        this.description = todo.getDescription();&#10;        this.priority = todo.getPriority();&#10;        this.isCompleted = todo.isCompleted();&#10;        this.dueDate = todo.getDueDate();&#10;        this.createdAt = todo.getCreatedAt();&#10;        this.updatedAt = todo.getUpdatedAt();&#10;    }&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public Todo.Priority getPriority() {&#10;        return priority;&#10;    }&#10;&#10;    public void setPriority(Todo.Priority priority) {&#10;        this.priority = priority;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return isCompleted;&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        isCompleted = completed;&#10;    }&#10;&#10;    public LocalDateTime getDueDate() {&#10;        return dueDate;&#10;    }&#10;&#10;    public void setDueDate(LocalDateTime dueDate) {&#10;        this.dueDate = dueDate;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public LocalDateTime getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(LocalDateTime updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/entity/AiSuggestion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/entity/AiSuggestion.java" />
              <option name="updatedContent" value="package com.todoai.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Size;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;ai_suggestions&quot;)&#10;public class AiSuggestion {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotNull&#10;    @Column(name = &quot;user_id&quot;)&#10;    private Long userId;&#10;&#10;    @NotBlank&#10;    @Size(max = 500)&#10;    @Column(name = &quot;suggested_task&quot;)&#10;    private String suggestedTask;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private Todo.Priority priority = Todo.Priority.MEDIUM;&#10;&#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;, insertable = false, updatable = false)&#10;    private User user;&#10;&#10;    public AiSuggestion() {}&#10;&#10;    public AiSuggestion(Long userId, String suggestedTask, Todo.Priority priority) {&#10;        this.userId = userId;&#10;        this.suggestedTask = suggestedTask;&#10;        this.priority = priority;&#10;        this.createdAt = LocalDateTime.now();&#10;    }&#10;&#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public Long getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(Long userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public String getSuggestedTask() {&#10;        return suggestedTask;&#10;    }&#10;&#10;    public void setSuggestedTask(String suggestedTask) {&#10;        this.suggestedTask = suggestedTask;&#10;    }&#10;&#10;    public Todo.Priority getPriority() {&#10;        return priority;&#10;    }&#10;&#10;    public void setPriority(Todo.Priority priority) {&#10;        this.priority = priority;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/entity/Todo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/entity/Todo.java" />
              <option name="updatedContent" value="package com.todoai.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Size;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;todos&quot;)&#10;public class Todo {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotNull&#10;    @Column(name = &quot;user_id&quot;)&#10;    private Long userId;&#10;&#10;    @NotBlank&#10;    @Size(max = 255)&#10;    private String title;&#10;&#10;    @Size(max = 1000)&#10;    private String description;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private Priority priority = Priority.MEDIUM;&#10;&#10;    @Column(name = &quot;is_completed&quot;)&#10;    private boolean isCompleted = false;&#10;&#10;    @Column(name = &quot;due_date&quot;)&#10;    private LocalDateTime dueDate;&#10;&#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;&#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;, insertable = false, updatable = false)&#10;    private User user;&#10;&#10;    public enum Priority {&#10;        LOW, MEDIUM, HIGH, URGENT&#10;    }&#10;&#10;    public Todo() {}&#10;&#10;    public Todo(Long userId, String title, String description, Priority priority, LocalDateTime dueDate) {&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.priority = priority;&#10;        this.dueDate = dueDate;&#10;        this.createdAt = LocalDateTime.now();&#10;        this.updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public Long getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(Long userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public Priority getPriority() {&#10;        return priority;&#10;    }&#10;&#10;    public void setPriority(Priority priority) {&#10;        this.priority = priority;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return isCompleted;&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        isCompleted = completed;&#10;    }&#10;&#10;    public LocalDateTime getDueDate() {&#10;        return dueDate;&#10;    }&#10;&#10;    public void setDueDate(LocalDateTime dueDate) {&#10;        this.dueDate = dueDate;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public LocalDateTime getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(LocalDateTime updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/entity/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/entity/User.java" />
              <option name="updatedContent" value="package com.todoai.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import org.springframework.security.core.GrantedAuthority;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Collection;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User implements UserDetails {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank&#10;    @Size(min = 3, max = 50)&#10;    @Column(unique = true)&#10;    private String username;&#10;&#10;    @NotBlank&#10;    @Email&#10;    @Column(unique = true)&#10;    private String email;&#10;&#10;    @NotBlank&#10;    @Size(min = 8)&#10;    private String password;&#10;&#10;    @Column(name = &quot;created_at&quot;)&#10;    private LocalDateTime createdAt;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Todo&gt; todos;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;AiSuggestion&gt; aiSuggestions;&#10;&#10;    public User() {}&#10;&#10;    public User(String username, String email, String password) {&#10;        this.username = username;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.createdAt = LocalDateTime.now();&#10;    }&#10;&#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;    }&#10;&#10;    // UserDetails implementation&#10;    @Override&#10;    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {&#10;        return List.of();&#10;    }&#10;&#10;    @Override&#10;    public boolean isAccountNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isAccountNonLocked() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isCredentialsNonExpired() {&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean isEnabled() {&#10;        return true;&#10;    }&#10;&#10;    // Getters and setters&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public List&lt;Todo&gt; getTodos() {&#10;        return todos;&#10;    }&#10;&#10;    public void setTodos(List&lt;Todo&gt; todos) {&#10;        this.todos = todos;&#10;    }&#10;&#10;    public List&lt;AiSuggestion&gt; getAiSuggestions() {&#10;        return aiSuggestions;&#10;    }&#10;&#10;    public void setAiSuggestions(List&lt;AiSuggestion&gt; aiSuggestions) {&#10;        this.aiSuggestions = aiSuggestions;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/repository/AiSuggestionRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/repository/AiSuggestionRepository.java" />
              <option name="updatedContent" value="package com.todoai.repository;&#10;&#10;import com.todoai.entity.AiSuggestion;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface AiSuggestionRepository extends JpaRepository&lt;AiSuggestion, Long&gt; {&#10;    List&lt;AiSuggestion&gt; findByUserIdOrderByCreatedAtDesc(Long userId);&#10;    void deleteByUserId(Long userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/repository/TodoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/repository/TodoRepository.java" />
              <option name="updatedContent" value="package com.todoai.repository;&#10;&#10;import com.todoai.entity.Todo;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface TodoRepository extends JpaRepository&lt;Todo, Long&gt; {&#10;    List&lt;Todo&gt; findByUserIdOrderByCreatedAtDesc(Long userId);&#10;    List&lt;Todo&gt; findByUserIdAndIsCompletedOrderByCreatedAtDesc(Long userId, boolean isCompleted);&#10;    Optional&lt;Todo&gt; findByIdAndUserId(Long id, Long userId);&#10;    &#10;    @Query(&quot;SELECT t FROM Todo t WHERE t.userId = :userId ORDER BY &quot; +&#10;           &quot;CASE t.priority WHEN 'URGENT' THEN 1 WHEN 'HIGH' THEN 2 WHEN 'MEDIUM' THEN 3 WHEN 'LOW' THEN 4 END, &quot; +&#10;           &quot;t.dueDate ASC NULLS LAST, t.createdAt DESC&quot;)&#10;    List&lt;Todo&gt; findByUserIdOrderByPriorityAndDueDate(@Param(&quot;userId&quot;) Long userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/repository/UserRepository.java" />
              <option name="updatedContent" value="package com.todoai.repository;&#10;&#10;import com.todoai.entity.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;    Optional&lt;User&gt; findByUsername(String username);&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;    boolean existsByUsername(String username);&#10;    boolean existsByEmail(String email);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/security/AuthTokenFilter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/security/AuthTokenFilter.java" />
              <option name="originalContent" value="package com.todoai.security;&#10;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;&#10;import java.io.IOException;&#10;&#10;public class AuthTokenFilter extends OncePerRequestFilter {&#10;    @Autowired&#10;    private JwtUtils jwtUtils;&#10;&#10;    @Autowired&#10;    private UserDetailsService userDetailsService;&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(AuthTokenFilter.class);&#10;&#10;    @Override&#10;    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,&#10;                                    FilterChain filterChain) throws ServletException, IOException {&#10;        try {&#10;            String jwt = parseJwt(request);&#10;            if (jwt != null &amp;&amp; jwtUtils.validateJwtToken(jwt)) {&#10;                String username = jwtUtils.getUserNameFromJwtToken(jwt);&#10;&#10;                UserDetails userDetails = userDetailsService.loadUserByUsername(username);&#10;                UsernamePasswordAuthenticationToken authentication =&#10;                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());&#10;                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));&#10;&#10;                SecurityContextHolder.getContext().setAuthentication(authentication);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Cannot set user authentication: {}&quot;, e);&#10;        }&#10;&#10;        filterChain.doFilter(request, response);&#10;    }&#10;&#10;    private String parseJwt(HttpServletRequest request) {&#10;        String headerAuth = request.getHeader(&quot;Authorization&quot;);&#10;&#10;        if (StringUtils.hasText(headerAuth) &amp;&amp; headerAuth.startsWith(&quot;Bearer &quot;)) {&#10;            return headerAuth.substring(7);&#10;        }&#10;&#10;        return null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todoai.security;&#10;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;&#10;import java.io.IOException;&#10;&#10;public class AuthTokenFilter extends OncePerRequestFilter {&#10;    @Autowired&#10;    private JwtUtils jwtUtils;&#10;&#10;    @Autowired&#10;    private UserDetailsService userDetailsService;&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(AuthTokenFilter.class);&#10;&#10;    @Override&#10;    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,&#10;                                    FilterChain filterChain) throws ServletException, IOException {&#10;        String requestURI = request.getRequestURI();&#10;        logger.debug(&quot;Processing request: {} {}&quot;, request.getMethod(), requestURI);&#10;        &#10;        try {&#10;            String jwt = parseJwt(request);&#10;            logger.debug(&quot;Extracted JWT token: {}&quot;, jwt != null ? &quot;Present&quot; : &quot;Not found&quot;);&#10;            &#10;            if (jwt != null &amp;&amp; jwtUtils.validateJwtToken(jwt)) {&#10;                logger.debug(&quot;JWT token is valid&quot;);&#10;                String username = jwtUtils.getUserNameFromJwtToken(jwt);&#10;                logger.debug(&quot;Username from JWT: {}&quot;, username);&#10;&#10;                UserDetails userDetails = userDetailsService.loadUserByUsername(username);&#10;                logger.debug(&quot;UserDetails loaded for: {}&quot;, username);&#10;                &#10;                UsernamePasswordAuthenticationToken authentication =&#10;                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());&#10;                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));&#10;&#10;                SecurityContextHolder.getContext().setAuthentication(authentication);&#10;                logger.debug(&quot;Authentication set in SecurityContext for user: {}&quot;, username);&#10;            } else {&#10;                logger.debug(&quot;JWT token is null or invalid for request: {}&quot;, requestURI);&#10;            }&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Cannot set user authentication for request {}: {}&quot;, requestURI, e.getMessage());&#10;        }&#10;&#10;        filterChain.doFilter(request, response);&#10;    }&#10;&#10;    private String parseJwt(HttpServletRequest request) {&#10;        String headerAuth = request.getHeader(&quot;Authorization&quot;);&#10;        logger.debug(&quot;Authorization header: {}&quot;, headerAuth != null ? &quot;Present&quot; : &quot;Not found&quot;);&#10;&#10;        if (StringUtils.hasText(headerAuth) &amp;&amp; headerAuth.startsWith(&quot;Bearer &quot;)) {&#10;            String token = headerAuth.substring(7);&#10;            logger.debug(&quot;Parsed JWT token length: {}&quot;, token.length());&#10;            return token;&#10;        }&#10;&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/security/JwtUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/security/JwtUtils.java" />
              <option name="originalContent" value="package com.todoai.security;&#10;&#10;import io.jsonwebtoken.*;&#10;import io.jsonwebtoken.io.Decoders;&#10;import io.jsonwebtoken.security.Keys;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.security.Key;&#10;import java.util.Date;&#10;&#10;@Component&#10;public class JwtUtils {&#10;    private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);&#10;&#10;    @Value(&quot;${spring.security.jwt.secret}&quot;)&#10;    private String jwtSecret;&#10;&#10;    @Value(&quot;${spring.security.jwt.expiration}&quot;)&#10;    private int jwtExpirationMs;&#10;&#10;    public String generateJwtToken(Authentication authentication) {&#10;        UserDetails userPrincipal = (UserDetails) authentication.getPrincipal();&#10;&#10;        return Jwts.builder()&#10;                .setSubject((userPrincipal.getUsername()))&#10;                .setIssuedAt(new Date())&#10;                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))&#10;                .signWith(key(), SignatureAlgorithm.HS512)&#10;                .compact();&#10;    }&#10;&#10;    private Key key() {&#10;        return Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtSecret));&#10;    }&#10;&#10;    public String getUserNameFromJwtToken(String token) {&#10;        return Jwts.parserBuilder().setSigningKey(key()).build()&#10;                .parseClaimsJws(token).getBody().getSubject();&#10;    }&#10;&#10;    public boolean validateJwtToken(String authToken) {&#10;        try {&#10;            Jwts.parserBuilder().setSigningKey(key()).build().parse(authToken);&#10;            return true;&#10;        } catch (MalformedJwtException e) {&#10;            logger.error(&quot;Invalid JWT token: {}&quot;, e.getMessage());&#10;        } catch (ExpiredJwtException e) {&#10;            logger.error(&quot;JWT token is expired: {}&quot;, e.getMessage());&#10;        } catch (UnsupportedJwtException e) {&#10;            logger.error(&quot;JWT token is unsupported: {}&quot;, e.getMessage());&#10;        } catch (IllegalArgumentException e) {&#10;            logger.error(&quot;JWT claims string is empty: {}&quot;, e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todoai.security;&#10;&#10;import io.jsonwebtoken.*;&#10;import io.jsonwebtoken.io.Decoders;&#10;import io.jsonwebtoken.security.Keys;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.security.Key;&#10;import java.util.Date;&#10;&#10;@Component&#10;public class JwtUtils {&#10;    private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);&#10;&#10;    @Value(&quot;${spring.security.jwt.secret}&quot;)&#10;    private String jwtSecret;&#10;&#10;    @Value(&quot;${spring.security.jwt.expiration}&quot;)&#10;    private int jwtExpirationMs;&#10;&#10;    public String generateJwtToken(Authentication authentication) {&#10;        UserDetails userPrincipal = (UserDetails) authentication.getPrincipal();&#10;&#10;        return Jwts.builder()&#10;                .setSubject((userPrincipal.getUsername()))&#10;                .setIssuedAt(new Date())&#10;                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))&#10;                .signWith(key(), SignatureAlgorithm.HS512)&#10;                .compact();&#10;    }&#10;&#10;    private Key key() {&#10;        return Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtSecret));&#10;    }&#10;&#10;    public String getUserNameFromJwtToken(String token) {&#10;        return Jwts.parser().setSigningKey(key()).build()&#10;                .parseClaimsJws(token).getBody().getSubject();&#10;    }&#10;&#10;    public boolean validateJwtToken(String authToken) {&#10;        try {&#10;            Jwts.parser().setSigningKey(key()).build().parseClaimsJws(authToken);&#10;            return true;&#10;        } catch (MalformedJwtException e) {&#10;            logger.error(&quot;Invalid JWT token: {}&quot;, e.getMessage());&#10;        } catch (ExpiredJwtException e) {&#10;            logger.error(&quot;JWT token is expired: {}&quot;, e.getMessage());&#10;        } catch (UnsupportedJwtException e) {&#10;            logger.error(&quot;JWT token is unsupported: {}&quot;, e.getMessage());&#10;        } catch (IllegalArgumentException e) {&#10;            logger.error(&quot;JWT claims string is empty: {}&quot;, e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/service/AuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/service/AuthService.java" />
              <option name="originalContent" value="package com.todoai.service;&#10;&#10;import com.todoai.dto.auth.JwtResponse;&#10;import com.todoai.dto.auth.LoginRequest;&#10;import com.todoai.dto.auth.RegisterRequest;&#10;import com.todoai.entity.User;&#10;import com.todoai.repository.UserRepository;&#10;import com.todoai.security.JwtUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class AuthService {&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;&#10;    @Autowired&#10;    private AuthenticationManager authenticationManager;&#10;&#10;    @Autowired&#10;    private JwtUtils jwtUtils;&#10;&#10;    public JwtResponse authenticateUser(LoginRequest loginRequest) {&#10;        Authentication authentication = authenticationManager.authenticate(&#10;            new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword())&#10;        );&#10;&#10;        SecurityContextHolder.getContext().setAuthentication(authentication);&#10;        String jwt = jwtUtils.generateJwtToken(authentication);&#10;&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        return new JwtResponse(jwt, user.getId(), user.getUsername(), user.getEmail());&#10;    }&#10;&#10;    public User registerUser(RegisterRequest registerRequest) {&#10;        if (userRepository.existsByUsername(registerRequest.getUsername())) {&#10;            throw new RuntimeException(&quot;Error: Username is already taken!&quot;);&#10;        }&#10;&#10;        if (userRepository.existsByEmail(registerRequest.getEmail())) {&#10;            throw new RuntimeException(&quot;Error: Email is already in use!&quot;);&#10;        }&#10;&#10;        User user = new User(&#10;            registerRequest.getUsername(),&#10;            registerRequest.getEmail(),&#10;            passwordEncoder.encode(registerRequest.getPassword())&#10;        );&#10;&#10;        return userRepository.save(user);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todoai.service;&#10;&#10;import com.todoai.dto.auth.JwtResponse;&#10;import com.todoai.dto.auth.LoginRequest;&#10;import com.todoai.dto.auth.RegisterRequest;&#10;import com.todoai.entity.User;&#10;import com.todoai.repository.UserRepository;&#10;import com.todoai.security.JwtUtils;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class AuthService {&#10;    private static final Logger logger = LoggerFactory.getLogger(AuthService.class);&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;&#10;    @Autowired&#10;    private AuthenticationManager authenticationManager;&#10;&#10;    @Autowired&#10;    private JwtUtils jwtUtils;&#10;&#10;    public JwtResponse authenticateUser(LoginRequest loginRequest) {&#10;        logger.info(&quot;Starting authentication for user: {}&quot;, loginRequest.getUsername());&#10;        &#10;        try {&#10;            Authentication authentication = authenticationManager.authenticate(&#10;                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword())&#10;            );&#10;            logger.info(&quot;Authentication successful for user: {}&quot;, loginRequest.getUsername());&#10;&#10;            SecurityContextHolder.getContext().setAuthentication(authentication);&#10;            logger.debug(&quot;Security context set for user: {}&quot;, loginRequest.getUsername());&#10;&#10;            String jwt = jwtUtils.generateJwtToken(authentication);&#10;            logger.debug(&quot;JWT token generated for user: {}&quot;, loginRequest.getUsername());&#10;&#10;            User user = (User) authentication.getPrincipal();&#10;            logger.info(&quot;Login completed successfully for user: {} (ID: {})&quot;, user.getUsername(), user.getId());&#10;&#10;            return new JwtResponse(jwt, user.getId(), user.getUsername(), user.getEmail());&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Authentication failed for user: {}. Error: {}&quot;, loginRequest.getUsername(), e.getMessage());&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public User registerUser(RegisterRequest registerRequest) {&#10;        logger.info(&quot;Starting user registration for username: {} and email: {}&quot;, &#10;                   registerRequest.getUsername(), registerRequest.getEmail());&#10;&#10;        // Check if username already exists&#10;        boolean usernameExists = userRepository.existsByUsername(registerRequest.getUsername());&#10;        logger.debug(&quot;Username '{}' exists check: {}&quot;, registerRequest.getUsername(), usernameExists);&#10;        &#10;        if (usernameExists) {&#10;            logger.warn(&quot;Registration failed - Username already taken: {}&quot;, registerRequest.getUsername());&#10;            throw new RuntimeException(&quot;Error: Username is already taken!&quot;);&#10;        }&#10;&#10;        // Check if email already exists&#10;        boolean emailExists = userRepository.existsByEmail(registerRequest.getEmail());&#10;        logger.debug(&quot;Email '{}' exists check: {}&quot;, registerRequest.getEmail(), emailExists);&#10;        &#10;        if (emailExists) {&#10;            logger.warn(&quot;Registration failed - Email already in use: {}&quot;, registerRequest.getEmail());&#10;            throw new RuntimeException(&quot;Error: Email is already in use!&quot;);&#10;        }&#10;&#10;        logger.debug(&quot;Encoding password for user: {}&quot;, registerRequest.getUsername());&#10;        String encodedPassword = passwordEncoder.encode(registerRequest.getPassword());&#10;        logger.debug(&quot;Password encoded successfully for user: {}&quot;, registerRequest.getUsername());&#10;&#10;        User user = new User(&#10;            registerRequest.getUsername(),&#10;            registerRequest.getEmail(),&#10;            encodedPassword&#10;        );&#10;&#10;        logger.debug(&quot;Created User entity for: {}&quot;, registerRequest.getUsername());&#10;&#10;        try {&#10;            User savedUser = userRepository.save(user);&#10;            logger.info(&quot;User registered successfully: {} (ID: {})&quot;, savedUser.getUsername(), savedUser.getId());&#10;            return savedUser;&#10;        } catch (Exception e) {&#10;            logger.error(&quot;Failed to save user: {}. Error: {}&quot;, registerRequest.getUsername(), e.getMessage());&#10;            throw new RuntimeException(&quot;Error: Failed to register user - &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/service/TodoService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/service/TodoService.java" />
              <option name="originalContent" value="package com.todoai.service;&#10;&#10;import com.todoai.dto.todo.TodoRequest;&#10;import com.todoai.dto.todo.TodoResponse;&#10;import com.todoai.entity.Todo;&#10;import com.todoai.entity.User;&#10;import com.todoai.repository.TodoRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class TodoService {&#10;    @Autowired&#10;    private TodoRepository todoRepository;&#10;&#10;    public List&lt;TodoResponse&gt; getUserTodos(Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;        return todoRepository.findByUserIdOrderByCreatedAtDesc(user.getId())&#10;                .stream()&#10;                .map(TodoResponse::new)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public TodoResponse createTodo(TodoRequest todoRequest, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        Todo todo = new Todo(&#10;            user.getId(),&#10;            todoRequest.getTitle(),&#10;            todoRequest.getDescription(),&#10;            todoRequest.getPriority(),&#10;            todoRequest.getDueDate()&#10;        );&#10;&#10;        Todo savedTodo = todoRepository.save(todo);&#10;        return new TodoResponse(savedTodo);&#10;    }&#10;&#10;    public TodoResponse updateTodo(Long todoId, TodoRequest todoRequest, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        Todo todo = todoRepository.findByIdAndUserId(todoId, user.getId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Todo not found or access denied&quot;));&#10;&#10;        todo.setTitle(todoRequest.getTitle());&#10;        todo.setDescription(todoRequest.getDescription());&#10;        todo.setPriority(todoRequest.getPriority());&#10;        todo.setDueDate(todoRequest.getDueDate());&#10;&#10;        Todo updatedTodo = todoRepository.save(todo);&#10;        return new TodoResponse(updatedTodo);&#10;    }&#10;&#10;    public TodoResponse completeTodo(Long todoId, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        Todo todo = todoRepository.findByIdAndUserId(todoId, user.getId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Todo not found or access denied&quot;));&#10;&#10;        todo.setCompleted(true);&#10;        Todo updatedTodo = todoRepository.save(todo);&#10;        return new TodoResponse(updatedTodo);&#10;    }&#10;&#10;    public void deleteTodo(Long todoId, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        Todo todo = todoRepository.findByIdAndUserId(todoId, user.getId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Todo not found or access denied&quot;));&#10;&#10;        todoRepository.delete(todo);&#10;    }&#10;&#10;    public List&lt;Todo&gt; getUserTodosForAI(Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;        return todoRepository.findByUserIdOrderByCreatedAtDesc(user.getId());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todoai.service;&#10;&#10;import com.todoai.dto.todo.TodoRequest;&#10;import com.todoai.dto.todo.TodoResponse;&#10;import com.todoai.entity.Todo;&#10;import com.todoai.entity.User;&#10;import com.todoai.repository.TodoRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class TodoService {&#10;    @Autowired&#10;    private TodoRepository todoRepository;&#10;&#10;    public List&lt;TodoResponse&gt; getUserTodos(Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;        return todoRepository.findByUserIdOrderByCreatedAtDesc(user.getId())&#10;                .stream()&#10;                .map(TodoResponse::new)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public TodoResponse createTodo(TodoRequest todoRequest, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        Todo todo = new Todo(&#10;            user.getId(),&#10;            todoRequest.getTitle(),&#10;            todoRequest.getDescription(),&#10;            todoRequest.getPriority(),&#10;            todoRequest.getDueDate()&#10;        );&#10;&#10;        Todo savedTodo = todoRepository.save(todo);&#10;        return new TodoResponse(savedTodo);&#10;    }&#10;&#10;    public TodoResponse updateTodo(Long todoId, TodoRequest todoRequest, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        Todo todo = todoRepository.findByIdAndUserId(todoId, user.getId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Todo not found or access denied&quot;));&#10;&#10;        todo.setTitle(todoRequest.getTitle());&#10;        todo.setDescription(todoRequest.getDescription());&#10;        todo.setPriority(todoRequest.getPriority());&#10;        todo.setDueDate(todoRequest.getDueDate());&#10;&#10;        Todo updatedTodo = todoRepository.save(todo);&#10;        return new TodoResponse(updatedTodo);&#10;    }&#10;&#10;    public TodoResponse completeTodo(Long todoId, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        Todo todo = todoRepository.findByIdAndUserId(todoId, user.getId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Todo not found or access denied&quot;));&#10;&#10;        todo.setCompleted(true);&#10;        Todo updatedTodo = todoRepository.save(todo);&#10;        return new TodoResponse(updatedTodo);&#10;    }&#10;&#10;    public void deleteTodo(Long todoId, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;&#10;        Todo todo = todoRepository.findByIdAndUserId(todoId, user.getId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Todo not found or access denied&quot;));&#10;&#10;        todoRepository.delete(todo);&#10;    }&#10;&#10;    public List&lt;Todo&gt; getUserTodosForAI(Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;        return todoRepository.findByUserIdOrderByCreatedAtDesc(user.getId());&#10;    }&#10;&#10;    public TodoResponse toggleTodoCompletion(Long todoId, Authentication authentication) {&#10;        User user = (User) authentication.getPrincipal();&#10;        &#10;        Todo todo = todoRepository.findByIdAndUserId(todoId, user.getId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Todo not found or access denied&quot;));&#10;&#10;        // Toggle the completion status&#10;        todo.setCompleted(!todo.isCompleted());&#10;        Todo updatedTodo = todoRepository.save(todo);&#10;        return new TodoResponse(updatedTodo);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/todoai/service/UserDetailsServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/todoai/service/UserDetailsServiceImpl.java" />
              <option name="updatedContent" value="package com.todoai.service;&#10;&#10;import com.todoai.entity.User;&#10;import com.todoai.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;@Service&#10;public class UserDetailsServiceImpl implements UserDetailsService {&#10;    @Autowired&#10;    UserRepository userRepository;&#10;&#10;    @Override&#10;    @Transactional&#10;    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&#10;        User user = userRepository.findByUsername(username)&#10;                .orElseThrow(() -&gt; new UsernameNotFoundException(&quot;User Not Found with username: &quot; + username));&#10;&#10;        return user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/Main.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;//TIP To &lt;b&gt;Run&lt;/b&gt; code, press &lt;shortcut actionId=&quot;Run&quot;/&gt; or&#10;// click the &lt;icon src=&quot;AllIcons.Actions.Execute&quot;/&gt; icon in the gutter.&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        //TIP Press &lt;shortcut actionId=&quot;ShowIntentionActions&quot;/&gt; with your caret at the highlighted text&#10;        // to see how IntelliJ IDEA suggests fixing it.&#10;        System.out.printf(&quot;Hello and welcome!&quot;);&#10;&#10;        for (int i = 1; i &lt;= 5; i++) {&#10;            //TIP Press &lt;shortcut actionId=&quot;Debug&quot;/&gt; to start debugging your code. We have set one &lt;icon src=&quot;AllIcons.Debugger.Db_set_breakpoint&quot;/&gt; breakpoint&#10;            // for you, but you can always add more by pressing &lt;shortcut actionId=&quot;ToggleLineBreakpoint&quot;/&gt;.&#10;            System.out.println(&quot;i = &quot; + i);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.todoai;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class TodoAiApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(TodoAiApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>